median(arr1, arr2)

    if arr1.size == 0 and arr2.size !=0:
        if arr2.size%2:
            return arr2[arr2.size / 2]

        else:
            return (arr2[arr2.size / 2] / arr2[arr2.size / 2 + 1])

    else if arr1.size != 0 and arr2.size ==0:
        if arr1.size%2:
            return arr1[arr1.size / 2]

        else:
            return (arr1[arr1.size / 2] / arr1[arr1.size / 2 + 1])
        
    else if arr1.size == 0 and arr2.size == 0:
        return 0

    else:
        purge = ceil ((m+n)/2) - 1
        while purge > 0:
            if arr1[0] > arr2[0]:
                index = binary_search(arr2, target = arr1[0])
                if index < arr2.size/2:
                    if index > purge:
                        del arr2[0 to purge]
                        break;
                    else:
                        del arr2[0 to index]
                        purge -= index
                else:
                    if index > purge:
                        del arr2[0 to purge]
                        break;
                    else:
                        del arr2[0 to index-1]
                        purge -= index-1
        
            else if arr2[0] > arr1[0]:
                index = binary_search(arr1, target = arr1[0])
                if index < arr1.size/2:
                    if index > purge:
                        del arr1[0 to purge]
                        break;
                    else:
                        del arr1[0 to index]
                        purge -= index
                else 
                    if index > purge:
                        del arr1[0 to purge]
                        break;
                    else:
                        del arr1[0 to index-1]
                        purge -= index-1
            
            else:
                if purge-2 >= 0:
                    del arr1[0]
                    del arr2[0]
                else if purge-1>=0: 
                    if arr1[0] > arr2[0]:
                        del arr2[0]
                    else
                        del arr2[0]
                else
                    return (arr1[0] + arr2[0]) / 2



